import React, { useState, useEffect, useCallback } from 'react';
import { ListTodo, Trash, CheckCircle, Circle, Loader2, AlertTriangle, Plus } from 'lucide-react';
import 'bootstrap/dist/css/bootstrap.min.css';

const API_BASE_URL = 'http://localhost:5000/todos';

const App = () => {
  const [tasks, setTasks] = useState([]);
  const [newTaskTitle, setNewTaskTitle] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState(null);

  const fetchTasks = useCallback(async () => {
    setIsLoading(true);
    setError(null);
    try {
      const response = await fetch(API_BASE_URL);
      if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
      let fetchedTasks = await response.json();
      fetchedTasks = fetchedTasks.map(task => ({ id: task.id, text: task.title, completed: Boolean(task.completed) }));
      fetchedTasks.sort((a, b) => a.completed - b.completed || b.id - a.id);
      setTasks(fetchedTasks);
    } catch (e) {
      setError(`Failed to connect to API: ${e.message}`);
    } finally {
      setIsLoading(false);
    }
  }, []);

  useEffect(() => { fetchTasks(); }, [fetchTasks]);

  const handleAddTask = async (e) => {
    e.preventDefault();
    if (!newTaskTitle.trim()) return;
    const title = newTaskTitle.trim();
    setNewTaskTitle('');
    setError(null);
    try {
      const response = await fetch(API_BASE_URL, { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ title }) });
      if (!response.ok) throw new Error('Failed to create task');
      await fetchTasks();
    } catch (e) { setError('Failed to add task'); }
  };

  const handleToggleComplete = async (id, currentTitle, completed) => {
    setError(null);
    try {
      const response = await fetch(`${API_BASE_URL}/${id}`, { method: 'PUT', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ title: currentTitle, completed: !completed }) });
      if (!response.ok) throw new Error('Failed to update task');
      await fetchTasks();
    } catch (e) { setError('Failed to update task'); }
  };

  const handleDeleteTask = async (id) => {
    setError(null);
    try {
      const response = await fetch(`${API_BASE_URL}/${id}`, { method: 'DELETE' });
      if (!response.ok) throw new Error('Failed to delete task');
      await fetchTasks();
    } catch (e) { setError('Failed to delete task'); }
  };

  if (isLoading && tasks.length === 0) return (
    <div className="d-flex align-items-center justify-content-center vh-100 bg-light">
      <Loader2 className="spinner-border text-primary me-3" style={{ animation: 'spin 1s linear infinite' }} />
      <p className="lead text-primary">Connecting to Express API...</p>
    </div>
  );

  return (
    <div className="bg-light pt-5 pb-5" style={{ minHeight: '100vh' }}>
      <div className="container">
        <div className="row justify-content-center">
          <div className="col-12 col-md-8 col-lg-6">
            <div className="card shadow-lg p-4 border-0 rounded-4">
              <h1 className="h3 card-title text-dark mb-4 d-flex align-items-center">
                <ListTodo className="text-primary me-3" size={32} />
                MySQL To-Do List
              </h1>
              <p className="text-muted mb-4 small">Connected to API: <span className="text-monospace text-primary">{API_BASE_URL}</span></p>
              {error && <div className="alert alert-danger mb-4 d-flex align-items-center shadow-sm rounded-3" role="alert">
                <AlertTriangle className="flex-shrink-0 me-3" size={20} />{error}
              </div>}
              <form onSubmit={handleAddTask} className="input-group mb-4 shadow-sm rounded-3">
                <input type="text" className="form-control border-end-0 p-3 rounded-start" placeholder="Add a new task..." value={newTaskTitle} onChange={(e) => setNewTaskTitle(e.target.value)} />
                <button type="submit" disabled={!newTaskTitle.trim() || isLoading} className="btn btn-primary rounded-end">
                  <Plus size={20} />
                </button>
              </form>
              <div className="list-group">
                {tasks.length === 0 && !isLoading ? (
                  <div className="text-center p-5 border rounded bg-light shadow-sm">
                    <CheckCircle className="text-muted mb-2" size={40} />
                    <p className="text-muted fw-bold mb-0">No tasks yet! Create one above.</p>
                  </div>
                ) : (
                  tasks.map(task => (
                    <div key={task.id} className={`list-group-item d-flex align-items-center justify-content-between mb-2 border rounded-3 shadow-sm ${task.completed ? 'bg-success bg-opacity-10 border-success' : 'bg-white'}`} style={{ cursor: 'pointer', transition: 'all 0.3s' }}>
                      <div className="d-flex align-items-center flex-grow-1" onClick={() => handleToggleComplete(task.id, task.text, task.completed)}>
                        {task.completed ? <CheckCircle className="text-success me-3" size={24} /> : <Circle className="text-muted me-3" size={24} />}
                        <span className={`${task.completed ? 'text-muted text-decoration-line-through' : 'text-dark fw-semibold'}`}>{task.text}</span>
                      </div>
                      <button onClick={() => handleDeleteTask(task.id)} className="btn btn-sm btn-outline-danger border-0 ms-3 rounded-circle shadow-sm hover-scale">
                        <Trash size={18} />
                      </button>
                    </div>
                  ))
                )}
                {isLoading && tasks.length > 0 && (
                  <div className="text-center py-2 text-primary d-flex align-items-center justify-content-center">
                    <Loader2 className="spinner-border spinner-border-sm me-2" style={{ animation: 'spin 1s linear infinite' }} /> Updating list...
                  </div>
                )}
              </div>
            </div>
          </div>
        </div>
      </div>
      <style>{`
        .hover-scale:hover { transform: scale(1.05); transition: transform 0.2s; }
        .list-group-item { transition: background-color 0.3s, transform 0.2s; }
      `}</style>
    </div>
  );
};

export default App;